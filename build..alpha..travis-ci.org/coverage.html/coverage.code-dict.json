{"/home/travis/build/npmtest/node-npmtest-forever-monitor/test.js":"/* istanbul instrument in package npmtest_forever_monitor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-forever-monitor/lib.npmtest_forever_monitor.js":"/* istanbul instrument in package npmtest_forever_monitor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_forever_monitor = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_forever_monitor = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-forever-monitor/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-forever-monitor && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_forever_monitor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_forever_monitor\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_forever_monitor.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_forever_monitor.rollup.js'] =\n            local.assetsDict['/assets.npmtest_forever_monitor.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_forever_monitor.__dirname +\n                    '/lib.npmtest_forever_monitor.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-forever-monitor/node_modules/forever-monitor/lib/index.js":"/*\n * index.js: Top-level include for the `forever-monitor` module.\n *\n * (C) 2010 Charlie Robbins & the Contributors\n * MIT LICENCE\n *\n */\n\nvar utile = require('utile'),\n    common = require('./forever-monitor/common');\n\nexports.kill         = common.kill;\nexports.checkProcess = common.checkProcess;\nexports.Monitor      = require('./forever-monitor/monitor').Monitor;\n\n//\n// Expose version through `pkginfo`\n//\nexports.version = require('../package').version;\n\n//\n// ### function start (script, options)\n// #### @script {string} Location of the script to run.\n// #### @options {Object} Configuration for forever instance.\n// Starts a script with forever\n//\nexports.start = function (script, options) {\n  if (!options.uid) {\n    options.uid = options.uid || utile.randomString(4).replace(/^\\-/, '_');\n  }\n\n  return new exports.Monitor(script, options).start();\n};\n","/home/travis/build/npmtest/node-npmtest-forever-monitor/node_modules/forever-monitor/lib/forever-monitor/common.js":"/*\n * common.js: Common methods used in `forever-monitor`.\n *\n * (C) 2010 Charlie Robbins & the Contributors\n * MIT LICENCE\n *\n */\n\nvar psTree = require('ps-tree'),\n    spawn = require('child_process').spawn;\n\n//\n// ### function checkProcess (pid, callback)\n// #### @pid {string} pid of the process to check\n// #### @callback {function} Continuation to pass control backto.\n// Utility function to check to see if a pid is running\n//\nexports.checkProcess = function (pid) {\n  if (!pid) {\n    return false;\n  }\n\n  try {\n    //\n    // Trying to kill non-existent process here raises a ESRCH - no such\n    // process exception. Also, signal 0 doesn't do no harm to a process - it\n    // only checks if sending a signal to a given process is possible.\n    //\n    process.kill(pid, 0);\n    return true;\n  }\n  catch (err) {\n    return false;\n  }\n};\n\nexports.kill = function (pid, killTree, signal, callback) {\n  signal   = signal   || 'SIGKILL';\n  callback = callback || function () {};\n\n  if (killTree && process.platform !== 'win32') {\n    psTree(pid, function (err, children) {\n      [pid].concat(\n        children.map(function (p) {\n          return p.PID;\n        })\n      ).forEach(function (tpid) {\n        try { process.kill(tpid, signal) }\n        catch (ex) { }\n      });\n\n      callback();\n    });\n  }\n  else {\n    try { process.kill(pid, signal) }\n    catch (ex) { }\n    callback();\n  }\n};","/home/travis/build/npmtest/node-npmtest-forever-monitor/node_modules/forever-monitor/lib/forever-monitor/monitor.js":"/*\n * monitor.js: Core functionality for the Monitor object.\n *\n * (C) 2010 Charlie Robbins & the Contributors\n * MIT LICENCE\n *\n */\n\nvar events = require('events'),\n    fs = require('fs'),\n    path = require('path'),\n    child_process = require('child_process'),\n    spawn = child_process.spawn,\n    broadway = require('broadway'),\n    psTree = require('ps-tree'),\n    utile = require('utile'),\n    common = require('./common'),\n    cluster = require('cluster'),\n    plugins = require('./plugins');\n\n//\n// ### function Monitor (script, options)\n// #### @script {string} Location of the target script to run.\n// #### @options {Object} Configuration for this instance.\n// Creates a new instance of forever with specified `options`.\n//\nvar Monitor = exports.Monitor = function (script, options) {\n  //\n  // Simple bootstrapper for attaching logger\n  // and watch plugins by default. Other plugins\n  // can be attached through `monitor.use(plugin, options)`.\n  //\n  function bootstrap(monitor) {\n    plugins.logger.attach.call(monitor, options);\n    if (options.watch) {\n      plugins.watch.attach.call(monitor, options);\n    }\n  }\n\n  var execPath = process.execPath,\n      self     = this;\n\n  //\n  // Setup basic configuration options\n  //\n  options               = options || {};\n  this.silent           = options.silent || false;\n  this.killTree         = options.killTree !== false;\n  this.uid              = options.uid || utile.randomString(4);\n  this.id               = options.id || false;\n  this.pidFile          = options.pidFile;\n  this.max              = options.max;\n  this.killTTL          = options.killTTL;\n  this.killSignal       = options.killSignal || 'SIGKILL';\n  this.childExists      = false;\n  this.checkFile        = options.checkFile !== false;\n  this.times            = 0;\n  this.warn             = console.error;\n\n  this.logFile          = options.logFile;\n  this.outFile          = options.outFile;\n  this.errFile          = options.errFile;\n  this.append           = options.append;\n  this.usePolling       = options.usePolling;\n  this.pollingInterval  = options.pollingInterval;\n\n  //\n  // Define some safety checks for commands with spaces\n  //\n  this.parser = options.parser || Monitor.parseCommand;\n\n  //\n  // Setup restart timing. These options control how quickly forever restarts\n  // a child process as well as when to kill a \"spinning\" process\n  //\n  this.minUptime     = typeof options.minUptime !== 'number' ? 0 : options.minUptime;\n  this.spinSleepTime = options.spinSleepTime || null;\n\n  //\n  // Special case Windows separately to decouple any\n  // future changes\n  //\n  if (process.platform === 'win32') {\n    execPath = '\"' + execPath + '\"';\n  }\n\n  if (options.options) {\n    console.warn('options.options is deprecated. Use options.args instead.');\n  }\n\n  //\n  // Setup the command to spawn and the options to pass\n  // to that command.\n  //\n  this.command   = options.command || execPath;\n  this.args      = options.args || options.options || [];\n  this.spawnWith = options.spawnWith || {};\n  this.sourceDir = options.sourceDir;\n  this.fork      = options.fork || false;\n  this.cwd       = options.cwd || process.cwd();\n  this.hideEnv   = options.hideEnv || [];\n  this._env      = options.env || {};\n  this._hideEnv  = {};\n\n  //\n  // Allow for custom stdio configuration of forked processes\n  //\n  this.stdio = options.stdio || null;\n\n  //\n  // Setup watch configuration options\n  //\n  this.watchIgnoreDotFiles = options.watchIgnoreDotFiles !== false;\n  this.watchIgnorePatterns = options.watchIgnorePatterns || [];\n  this.watchDirectory      = options.watchDirectory || this.sourceDir;\n\n  //\n  // Create a simple mapping of `this.hideEnv` to an easily indexable\n  // object\n  //\n  this.hideEnv.forEach(function (key) {\n    self._hideEnv[key] = true;\n  });\n\n  if (Array.isArray(script)) {\n    this.command = script[0];\n    this.args = script.slice(1);\n  }\n  else {\n    this.args.unshift(script);\n  }\n\n  if (this.sourceDir) {\n    this.args[0] = path.join(this.sourceDir, this.args[0]);\n  }\n\n  //\n  // Bootstrap this instance now that options\n  // have been set\n  //\n  broadway.App.call(this, { bootstrapper: { bootstrap: bootstrap } });\n};\n\n// Inherit from events.EventEmitter\nutile.inherits(Monitor, broadway.App);\n\n//\n// ### function start ([restart])\n// #### @restart {boolean} Value indicating whether this is a restart.\n// Start the process that this instance is configured for\n//\nMonitor.prototype.start = function (restart) {\n  var self = this,\n      child;\n\n  if (this.running && !restart) {\n    process.nextTick(function () {\n      self.emit('error', new Error('Cannot start process that is already running.'));\n    });\n    return this;\n  }\n\n  child = this.trySpawn();\n  if (!child) {\n    process.nextTick(function () {\n      self.emit('error', new Error('Target script does not exist: ' + self.args[0]));\n    });\n    return this;\n  }\n\n  this.ctime = Date.now();\n  this.child = child;\n  this.running = true;\n  this.isMaster = cluster.isMaster;\n\n  process.nextTick(function () {\n    self.emit(restart ? 'restart' : 'start', self, self.data);\n  });\n\n  function onMessage(msg) {\n    self.emit('message', msg);\n  }\n\n  // Re-emit messages from the child process\n  this.child.on('message', onMessage);\n\n  child.on('exit', function (code, signal) {\n    var spinning = Date.now() - self.ctime < self.minUptime;\n    child.removeListener('message', onMessage);\n    self.emit('exit:code', code, signal);\n\n    function letChildDie() {\n      self.running = false;\n      self.forceStop = false;\n      self.emit('exit', self, spinning);\n    }\n\n    function restartChild() {\n      self.forceRestart = false;\n      process.nextTick(function () {\n        self.start(true);\n      });\n    }\n\n    self.times++;\n\n    if (self.forceStop || (self.times >= self.max && !self.forceRestart)\n      || (spinning && typeof self.spinSleepTime !== 'number') && !self.forceRestart) {\n      letChildDie();\n    }\n    else if (spinning) {\n      setTimeout(restartChild, self.spinSleepTime);\n    }\n    else {\n      restartChild();\n    }\n  });\n\n  return this;\n};\n\n//\n// ### function trySpawn()\n// Tries to spawn the target Forever child process. Depending on\n// configuration, it checks the first argument of the options\n// to see if the file exists. This is useful is you are\n// trying to execute a script with an env: e.g. node myfile.js\n//\nMonitor.prototype.trySpawn = function () {\n  var run = this.parser(this.command, this.args.slice()),\n      stats;\n\n  if (/[^\\w]node$/.test(this.command) && this.checkFile && !this.childExists) {\n    try {\n      stats = fs.statSync(this.args[0]);\n      this.childExists = true;\n    }\n    catch (ex) {\n      return false;\n    }\n  }\n\n  this.spawnWith.cwd = this.spawnWith.cwd || this.cwd;\n  this.spawnWith.env = this._getEnv();\n\n  if (process.platform === 'win32') {\n    this.spawnWith.detached = true;\n  }\n\n  if (this.stdio) {\n    this.spawnWith.stdio = this.stdio;\n  }\n\n  if (this.fork) {\n    if (!this.stdio) {\n      this.spawnWith.stdio = [ 'pipe', 'pipe', 'pipe', 'ipc' ];\n    }\n    return spawn(run.command, run.args, this.spawnWith);\n  }\n\n  return spawn(run.command, run.args, this.spawnWith);\n};\n\n//\n// ### @data {Object}\n// Responds with the appropriate information about\n// this `Monitor` instance and it's associated child process.\n//\nMonitor.prototype.__defineGetter__('data', function () {\n  var self = this,\n      childData;\n\n  childData = {\n    ctime: this.ctime,\n    command: this.command,\n    file: this.args[0],\n    foreverPid: process.pid,\n    logFile: this.logFile,\n    args: this.args.slice(1),\n    pid: this.child ? this.child.pid : undefined,\n    silent: this.silent,\n    uid: this.uid,\n    id: this.id,\n    spawnWith: this.spawnWith,\n    running: this.running,\n    restarts: this.times,\n    isMaster: this.isMaster\n  };\n\n  ['pidFile', 'outFile', 'errFile', 'env', 'cwd'].forEach(function (key) {\n    if (self[key]) {\n      childData[key] = self[key];\n    }\n  });\n\n  if (this.sourceDir) {\n    childData.sourceDir = this.sourceDir;\n    childData.file = childData.file.replace(this.sourceDir + '/', '');\n  }\n\n  this.childData = childData;\n  return this.childData;\n\n  //\n  // Setup the forever process to listen to\n  // SIGINT and SIGTERM events so that we can\n  // clean up the *.pid file\n  //\n  // Remark: This should work, but the fd gets screwed up\n  //         with the daemon process.\n  //\n  // process.on('SIGINT', function () {\n  //   process.exit(0);\n  // });\n  //\n  // process.on('SIGTERM', function () {\n  //   process.exit(0);\n  // });\n  // process.on('exit', function () {\n  //   fs.unlinkSync(childPath);\n  // });\n});\n\n//\n// ### function restart ()\n// Restarts the target script associated with this instance.\n//\nMonitor.prototype.restart = function () {\n  this.times = this.times || 0;\n  this.forceRestart = true;\n\n  return !this.running\n    ? this.start(true)\n    : this.kill(false);\n};\n\n//\n// ### function stop ()\n// Stops the target script associated with this instance. Prevents it from auto-respawning\n//\nMonitor.prototype.stop = function () {\n  return this.kill(true);\n};\n\n//\n// ### function kill (forceStop)\n// #### @forceStop {boolean} Value indicating whether short circuit forever auto-restart.\n// Kills the ChildProcess object associated with this instance.\n//\nMonitor.prototype.kill = function (forceStop) {\n  var child = this.child,\n      self = this,\n      timer;\n\n  if (!child || (!this.running && !this.forceRestart)) {\n    process.nextTick(function () {\n      self.emit('error', new Error('Cannot stop process that is not running.'));\n    });\n  }\n  else {\n    //\n    // Set an instance variable here to indicate this\n    // stoppage is forced so that when `child.on('exit', ..)`\n    // fires in `Monitor.prototype.start` we can short circuit\n    // and prevent auto-restart\n    //\n    if (forceStop) {\n      this.forceStop = true;\n      //\n      // If we have a time before we truly kill forcefully, set up a timer\n      //\n      if (this.killTTL) {\n        timer = setTimeout(function () {\n          common.kill(self.child.pid, self.killTree, self.killSignal || 'SIGKILL');\n        }, this.killTTL);\n\n        child.once('exit', function () {\n          clearTimeout(timer);\n        });\n      }\n    }\n\n    child.once('exit', function () {\n      self.emit('stop', self.childData);\n      if (self.forceRestart && !self.running) {\n        self.start(true);\n      }\n    });\n\n    common.kill(this.child.pid, this.killTree, this.killSignal);\n  }\n\n  return this;\n};\n\n//\n// ### function send ()\n// Sends a message to a forked ChildProcess object associated with this instance.\n// see http://nodejs.org/api/child_process.html#child_process_child_send_message_sendhandle\n//\nMonitor.prototype.send = function (msg) {\n  var child = this.child,\n      self = this;\n\n  if (!child || !this.running) {\n    process.nextTick(function () {\n      self.emit('error', new Error('Cannot send to process that is not running.'));\n    });\n  }\n\n  if (child.send) { child.send(msg) }\n};\n\n//\n// ### function toString ()\n// Override default toString behavior and just respond\n// with JSON for this instance.\n//\nMonitor.prototype.toString = function () {\n  return JSON.stringify(this);\n};\n\n//\n// ### function inspect ()\n// Set this to null so that `util.inspect` does not\n// return `undefined`.'\n//\nMonitor.prototype.inspect = null;\n\n//\n// ### @private function _getEnv ()\n// Returns the environment variables that should be passed along\n// to the target process spawned by this instance.\n//\nMonitor.prototype._getEnv = function () {\n  var self = this,\n      merged = {};\n\n  function addKey(key, source) {\n    merged[key] = source[key];\n  }\n\n  //\n  // Mixin the key:value pairs from `process.env` and the custom\n  // environment variables in `this._env`.\n  //\n  Object.keys(process.env).forEach(function (key) {\n    if (!self._hideEnv[key]) {\n      addKey(key, process.env);\n    }\n  });\n\n  Object.keys(this._env).forEach(function (key) {\n    addKey(key, self._env);\n  });\n\n  return merged;\n};\n\n//\n// ### function parseCommand (command, args)\n// #### @command {String} Command string to parse\n// #### @args    {Array}  Additional default arguments\n//\n// Returns the `command` and the `args` parsed\n// from the command depending on the Platform.\n//\nMonitor.parseCommand = function (command, args) {\n  var match = command.match(\n    process.platform === 'win32' ? safetyChecks.windows : safetyChecks.linux\n  );\n\n  //\n  // No match means it's a bad command. This is configurable\n  // by passing a custom `parser` function into the `Monitor`\n  // constructor function.\n  //\n  if (!match) { return false; }\n\n  if (process.platform == 'win32') {\n    command = match[1] || match[2];\n    if (match[3]) {\n      args = match[3].split(' ').concat(args);\n    }\n  } else {\n    command = match[1];\n    if (match[2]) {\n      args = match[2].split(' ').concat(this.args);\n    }\n  }\n\n  return {\n    command: command,\n    args:    args\n  };\n};\n\n//\n// ### @private {Object} safetyChecks\n// Define default safety checks for commands\n// with spaces in Windows & Linux\n//\nvar safetyChecks = {\n  windows: /(?:\"(.*[^\\/])\"|(\\w+))(?:\\s(.*))?/,\n  linux:   /(.*?[^\\\\])(?: (.*)|$)/\n};\n","/home/travis/build/npmtest/node-npmtest-forever-monitor/node_modules/forever-monitor/lib/forever-monitor/plugins/index.js":"/*\n * index.js: Built-in plugins for forever-monitor.\n *\n * (C) 2010 Charlie Robbins & the Contributors\n * MIT LICENCE\n *\n */\n\nexports.logger = require('./logger');\nexports.watch  = require('./watch');","/home/travis/build/npmtest/node-npmtest-forever-monitor/node_modules/forever-monitor/lib/forever-monitor/plugins/logger.js":"/*\n * logger.js: Plugin for `Monitor` instances which adds stdout and stderr logging.\n *\n * (C) 2010 Charlie Robbins & the Contributors\n * MIT LICENCE\n *\n */\n\nvar fs = require('fs');\n\n//\n// Name the plugin\n//\nexports.name = 'logger';\n\n//\n// ### function attach (options)\n// #### @options {Object} Options for attaching to `Monitor`\n//\n// Attaches functionality for logging stdout and stderr to `Monitor` instances.\n//\nexports.attach = function (options) {\n  options = options || {};\n  var monitor = this;\n\n  if (options.outFile) {\n    monitor.stdout = options.stdout || fs.createWriteStream(options.outFile, {\n      flags: monitor.append ? 'a+' : 'w+',\n      encoding: 'utf8',\n      mode: 0644\n    });\n  }\n\n  if (options.errFile) {\n    monitor.stderr = options.stderr || fs.createWriteStream(options.errFile, {\n      flags: monitor.append ? 'a+' : 'w+',\n      encoding: 'utf8',\n      mode: 0644\n    });\n  }\n\n  monitor.on('start', startLogs);\n  monitor.on('restart', startLogs);\n  monitor.on('exit', stopLogs);\n\n  function stopLogs() {\n    if (monitor.stdout) {\n      //\n      // Remark: 0.8.x doesnt have an unpipe method\n      //\n      monitor.child.stdout.unpipe && monitor.child.stdout.unpipe(monitor.stdout);\n      monitor.stdout.destroy();\n      monitor.stdout = null;\n    }\n    //\n    // Remark: 0.8.x doesnt have an unpipe method\n    //\n    if (monitor.stderr) {\n      monitor.child.stderr.unpipe && monitor.child.stderr.unpipe(monitor.stderr);\n      monitor.stderr.destroy();\n      monitor.stderr = null;\n    }\n  }\n\n  function startLogs(child, childData) {\n    if (monitor.child) {\n      monitor.child.stdout.on('data', function onStdout(data) {\n        monitor.emit('stdout', data);\n      });\n\n      monitor.child.stderr.on('data', function onStderr(data) {\n        monitor.emit('stderr', data);\n      });\n\n      if (!monitor.silent) {\n        process.stdout.setMaxListeners(0);\n        process.stderr.setMaxListeners(0);\n        monitor.child.stdout.pipe(process.stdout, { end: false });\n        monitor.child.stderr.pipe(process.stderr, { end: false });\n      }\n\n      if (monitor.stdout) {\n        monitor.child.stdout.pipe(monitor.stdout, { end: false });\n      }\n\n      if (monitor.stderr) {\n        monitor.child.stderr.pipe(monitor.stderr, { end: false });\n      }\n    }\n  }\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-forever-monitor/node_modules/forever-monitor/lib/forever-monitor/plugins/watch.js":"/*\n * watch.js: Plugin for `Monitor` instances which adds file watching.\n *\n * (C) 2010 Charlie Robbins & the Contributors\n * MIT LICENCE\n *\n */\n\nvar fs = require('fs'),\n    path = require('path'),\n    minimatch = require('minimatch'),\n    chokidar = require('chokidar');\n\nexports.name = 'watch';\n\n//\n// ### @private function _watchFilter\n// #### @file {string} File name\n// Determines whether we should restart if `file` change (@mikeal's filtering\n// is pretty messed up).\n//\nfunction watchFilter(fileName) {\n  var relFileName = path.relative(this.watchDirectory, fileName),\n      length = this.watchIgnorePatterns.length,\n      testName,\n      i;\n\n  if (this.watchIgnoreDotFiles && path.basename(fileName)[0] === '.') {\n    return false;\n  }\n\n  for (i = 0; i < length; i++) {\n    if (this.watchIgnorePatterns[i].length > 0) {\n      testName = (this.watchIgnorePatterns[i].charAt(0) !== '/') ? relFileName : fileName;\n      if (minimatch(testName, this.watchIgnorePatterns[i], { matchBase: this.watchDirectory })) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n//\n// ### function attach (options)\n// #### @options {Object} Options for attaching to `Monitor`\n//\n// Attaches functionality for logging stdout and stderr to `Monitor` instances.\n//\nexports.attach = function () {\n  var watchDirectory = this.watchDirectory,\n      monitor = this;\n\n  fs.readFile(path.join(this.watchDirectory, '.foreverignore'), 'utf8', function (err, data) {\n    if (err) {\n      return monitor.emit('watch:error', {\n        message: 'Could not read .foreverignore file.',\n        error: err.message\n      });\n    }\n\n    Array.prototype.push.apply(monitor.watchIgnorePatterns, data.split('\\n').filter(Boolean));\n  });\n\n  var opts = {\n    usePolling: this.usePolling,\n    interval: this.pollingInterval,\n    ignoreInitial: true,\n    ignored: function(fileName) {\n      return !watchFilter.call(monitor, fileName);\n    }\n  };\n\n  // Or, ignore: function(fileName) { return !watchFilter(fileName) }\n  chokidar\n    .watch(this.watchDirectory, opts)\n    .on('all', function(f, stat) {\n      monitor.emit('watch:restart', { file: f, stat: stat });\n      monitor.restart();\n    });\n};\n"}